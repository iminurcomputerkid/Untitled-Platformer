loose leaf paper background
hspd
vspd
jump on an enemy to defeat
arrow keys to move
stickman character
class for stickman
maybe plants on grounnd and nature in background (no color)

import pygame
import sys

pygame.init()

#dropping through platforms
drop_through_timer = 0

# Screen setup
WIDTH, HEIGHT = 1400, 820
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Untitled Platformer *kahoot music plays*")

# Colors
BLACK = (0, 0, 0)
LIGHT_BLUE = (135, 206, 250)
GREEN = (34, 139, 34)
GREY = (150, 150, 150)

# Clock
clock = pygame.time.Clock()
FPS = 60

# Stickman physics
x = WIDTH // 2
y = 450
speed = 5
jump_force = -20
gravity = 1
velocity_y = 0
is_jumping = False

# Ground settings
GROUND_Y = 450
ground_scroll = 0
GROUND_SCROLL_SPEED = 5
GROUND_SEGMENT_WIDTH = 100

# Movement boundaries
LEFT_BOUNDARY = WIDTH * 0.10  # 140 pixels
RIGHT_BOUNDARY = WIDTH * 0.90  # 1260 pixels

# Floating platform class
class Platform:
    def __init__(self, x, y, width, height, speed, left_bound, right_bound):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.speed = speed
        self.left_bound = left_bound
        self.right_bound = right_bound
        self.direction = 1

    def update(self):
        self.x += self.speed * self.direction
        if self.x <= self.left_bound:
            self.x = self.left_bound
            self.direction *= -1    
        elif self.x + self.width >= self.right_bound:
            self.x = self.right_bound - self.width
            self.direction *= -1

    def draw(self, surface):
        pygame.draw.rect(surface, GREY, (self.x, self.y, self.width, self.height))

# Platforms repositioned for reachable jumps
platforms = [
    Platform(300, 400, 120, 15, 2, 250, 450),
    Platform(600, 350, 150, 15, 3, 550, 800),
    Platform(900, 300, 100, 15, 1.5, 850, 1100),
    Platform(500, 250, 90, 15, 1.2, 450, 700),
    Platform(750, 200, 110, 15, 2, 700, 900),
    Platform(1100, 180, 140, 15, 1.8, 1050, 1300),
    Platform(200, 100, 40, 15, 7.5, 100, 1200)
]

# Animation
walk_frame = 0
walk_timer = 0
is_moving = False

running = True
while running:
    screen.fill(LIGHT_BLUE)  # Light blue background

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    is_moving = False
    move_dir = 0

    if keys[pygame.K_LEFT] or keys[pygame.K_a]:
        move_dir = -1
        is_moving = True
    if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
        move_dir = 1
        is_moving = True
    if (keys[pygame.K_UP] or keys[pygame.K_w] or keys[pygame.K_SPACE]) and not is_jumping:
        velocity_y = jump_force
        is_jumping = True
    speed = 5
    if keys[pygame.K_LSHIFT]:
        speed = 10

    velocity_y += gravity

    # Save old y for interpolation
    original_y = y
    steps = int(abs(velocity_y)) + 1  # Number of steps to avoid tunneling
    dy = velocity_y / steps

    on_platform = False
    for step in range(steps):
        y += dy
        stickman_feet_y = y + 15 + 40 + 30  # Update for new y

        for platform in platforms:
            platform_rect = pygame.Rect(platform.x, platform.y, platform.width, platform.height)
            stickman_rect = pygame.Rect(x - 15, stickman_feet_y - dy, 30, 5)

            if stickman_rect.colliderect(platform_rect) and velocity_y >= 0 and stickman_feet_y <= platform.y + dy + 5:
                y = platform.y - (15 + 40 + 30)
                velocity_y = 0
                is_jumping = False
                on_platform = True
                break
        if on_platform:
            break


    on_platform = False
    stickman_feet_y = y + 15 + 40 + 30  # head radius + body + leg length

    for platform in platforms:
        platform_rect = pygame.Rect(platform.x, platform.y, platform.width, platform.height)
        stickman_rect = pygame.Rect(x - 15, stickman_feet_y - velocity_y, 30, 5)
        if stickman_rect.colliderect(platform_rect) and velocity_y >= 0 and stickman_feet_y <= platform.y + velocity_y + 5:
            y = platform.y - (15 + 40 + 30)
            velocity_y = 0
            is_jumping = False
            on_platform = True
            break

    if not on_platform and y >= GROUND_Y:
        y = GROUND_Y
        velocity_y = 0
        is_jumping = False

    if move_dir != 0:
        new_x = x + move_dir * speed
        if LEFT_BOUNDARY < new_x < RIGHT_BOUNDARY:
            x = new_x
        else:
            ground_scroll -= move_dir * GROUND_SCROLL_SPEED
            for platform in platforms:
                platform.x -= move_dir * GROUND_SCROLL_SPEED

    for platform in platforms:
        platform.update()

    if is_moving and not is_jumping:
        walk_timer += 1
        if walk_timer >= 10:
            walk_timer = 0
            walk_frame = (walk_frame + 1) % 2
    else:
        walk_frame = 0

    num_segments = (WIDTH // GROUND_SEGMENT_WIDTH) + 2
    for i in range(num_segments):
        segment_x = (i * GROUND_SEGMENT_WIDTH) + (ground_scroll % GROUND_SEGMENT_WIDTH) - GROUND_SEGMENT_WIDTH
        pygame.draw.rect(screen, GREEN, (segment_x, GROUND_Y + 40, GROUND_SEGMENT_WIDTH, HEIGHT - (GROUND_Y + 40)))

    for platform in platforms:
        platform.draw(screen)

    # Stickman drawing variables
    head_radius = 15
    body_length = 40
    arm_length = 20
    leg_length = 30

    head_center = (x, y)
    body_top = (x, y + head_radius)
    body_bottom = (x, y + head_radius + body_length)
    shoulder_y = y + head_radius + 5
    hip_y = body_bottom[1]

    # Draw stickman in BLACK
    pygame.draw.circle(screen, BLACK, head_center, head_radius, 2)
    pygame.draw.line(screen, BLACK, body_top, body_bottom, 2)

    if is_jumping:
        # Arms bent up while jumping
        left_elbow = (x - 15, shoulder_y - 10)
        left_hand = (x - 25, shoulder_y - 25)
        pygame.draw.line(screen, BLACK, (x, shoulder_y), left_elbow, 2)
        pygame.draw.line(screen, BLACK, left_elbow, left_hand, 2)

        right_elbow = (x + 15, shoulder_y - 10)
        right_hand = (x + 25, shoulder_y - 25)
        pygame.draw.line(screen, BLACK, (x, shoulder_y), right_elbow, 2)
        pygame.draw.line(screen, BLACK, right_elbow, right_hand, 2)

        # Legs bent while jumping
        left_knee = (x - 10, hip_y + 15)
        left_foot = (x - 20, hip_y + 30)
        pygame.draw.line(screen, BLACK, body_bottom, left_knee, 2)
        pygame.draw.line(screen, BLACK, left_knee, left_foot, 2)

        right_knee = (x + 10, hip_y + 15)
        right_foot = (x + 20, hip_y + 30)
        pygame.draw.line(screen, BLACK, body_bottom, right_knee, 2)
        pygame.draw.line(screen, BLACK, right_knee, right_foot, 2)

    elif is_moving:
        # Walking animation arms and legs
        if walk_frame == 0:
            left_elbow = (x - 15, shoulder_y + 5)
            left_hand = (x - 25, shoulder_y + 15)
            pygame.draw.line(screen, BLACK, (x, shoulder_y), left_elbow, 2)
            pygame.draw.line(screen, BLACK, left_elbow, left_hand, 2)

            right_elbow = (x + 15, shoulder_y)
            right_hand = (x + 25, shoulder_y - 5)
            pygame.draw.line(screen, BLACK, (x, shoulder_y), right_elbow, 2)
            pygame.draw.line(screen, BLACK, right_elbow, right_hand, 2)

            left_knee = (x - 10, hip_y + 15)
            left_foot = (x - 20, hip_y + 30)
            pygame.draw.line(screen, BLACK, body_bottom, left_knee, 2)
            pygame.draw.line(screen, BLACK, left_knee, left_foot, 2)

            pygame.draw.line(screen, BLACK, body_bottom, (x + 10, hip_y + 30), 2)
        else:
            right_elbow = (x + 15, shoulder_y + 5)
            right_hand = (x + 25, shoulder_y + 15)
            pygame.draw.line(screen, BLACK, (x, shoulder_y), right_elbow, 2)
            pygame.draw.line(screen, BLACK, right_elbow, right_hand, 2)

            left_elbow = (x - 15, shoulder_y)
            left_hand = (x - 25, shoulder_y - 5)
            pygame.draw.line(screen, BLACK, (x, shoulder_y), left_elbow, 2)
            pygame.draw.line(screen, BLACK, left_elbow, left_hand, 2)

            right_knee = (x + 10, hip_y + 15)
            right_foot = (x + 20, hip_y + 30)
            pygame.draw.line(screen, BLACK, body_bottom, right_knee, 2)
            pygame.draw.line(screen, BLACK, right_knee, right_foot, 2)

            pygame.draw.line(screen, BLACK, body_bottom, (x - 10, hip_y + 30), 2)
    else:
        # Standing still arms and legs
        pygame.draw.line(screen, BLACK, (x - 20, shoulder_y), (x - 5, shoulder_y), 2)
        pygame.draw.line(screen, BLACK, (x + 20, shoulder_y), (x + 5, shoulder_y), 2)
        pygame.draw.line(screen, BLACK, body_bottom, (x - 10, hip_y + 30), 2)
        pygame.draw.line(screen, BLACK, body_bottom, (x + 10, hip_y + 30), 2)

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
sys.exit()