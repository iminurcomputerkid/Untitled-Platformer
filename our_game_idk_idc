import pygame
import sys
import random

pygame.init()

WIDTH, HEIGHT = 1400, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Platformer â€“ Star Collector")

# Colors
BLACK = (0, 0, 0)
LIGHT_BLUE = (135, 206, 250)
GREEN = (34, 139, 34)
GREY = (100, 100, 100)
RED = (255, 0, 0)
GOLD = (255, 215, 0)

clock = pygame.time.Clock()
FPS = 60

# Player setup
x, y = WIDTH // 2, 450
speed = 5
jump_force = -20
gravity = 1
velocity_y = 0
is_jumping = False

# Ground and scrolling
GROUND_Y = 450
ground_scroll = 0
GROUND_SCROLL_SPEED = 5
GROUND_SEGMENT_WIDTH = 100
LEFT_BOUNDARY = WIDTH * 0.10
RIGHT_BOUNDARY = WIDTH * 0.90

# Enemy setup
enemy_x, enemy_y = 100, GROUND_Y
enemy_speed = 6
sword_length = 25

# Platform class
class Platform:
    def __init__(self, x, y, w, h, spd, lb, rb):
        self.x, self.y = x, y
        self.width, self.height = w, h
        self.speed = spd
        self.left_bound, self.right_bound = lb, rb
        self.direction = 1

    def update(self):
        self.x += self.speed * self.direction
        if self.x <= self.left_bound or self.x + self.width >= self.right_bound:
            self.direction *= -1

    def draw(self, surf):
        pygame.draw.rect(surf, GREY, (self.x, self.y, self.width, self.height))

platforms = [
    Platform(300,400,120,15,2,250,450),
    Platform(600,350,150,15,3,550,800),
    Platform(900,300,100,15,1.5,850,1100),
    Platform(750,200,110,15,2,700,900),
    Platform(1100,180,140,15,1.8,1050,1300),
    Platform(200,100,40,15,7.5,100,1200)
]

# Function to spawn a star above a random platform
def create_star():
    p = random.choice(platforms)
    sx = p.x + random.randint(0, p.width - 30)
    sy = p.y - 40
    return pygame.Rect(sx, sy, 30, 30)

stars = [create_star()]

# Fonts and game state
font = pygame.font.SysFont(None, 48)
big_font = pygame.font.SysFont(None, 72)
score = 0
game_over = False
game_end_time = None

# Animation variables
walk_frame = 0
walk_timer = 0
is_moving = False

running = True
while running:
    screen.fill(LIGHT_BLUE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    if not game_over:
        keys = pygame.key.get_pressed()
        move_dir = 0

        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            move_dir = -1
            is_moving = True
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            move_dir = 1
            is_moving = True
        else:
            is_moving = False

        if (keys[pygame.K_UP] or keys[pygame.K_w] or keys[pygame.K_SPACE]) and not is_jumping:
            velocity_y = jump_force
            is_jumping = True

        speed = 10 if keys[pygame.K_LSHIFT] else 5

        # Gravity and vertical movement
        velocity_y += gravity
        steps = max(int(abs(velocity_y)) + 1, 1)
        dy = velocity_y / steps
        on_platform = False

        for _ in range(steps):
            y += dy
            feet_y = y + 15 + 40 + 30
            for p in platforms:
                pr = pygame.Rect(p.x, p.y, p.width, p.height)
                sr = pygame.Rect(x-15, feet_y - dy, 30, 5)
                if sr.colliderect(pr) and velocity_y >= 0 and feet_y <= p.y + dy + 5:
                    y = p.y - (15 + 40 + 30)
                    velocity_y = 0
                    is_jumping = False
                    on_platform = True
                    break
            if on_platform:
                break

        # Hit ground if not on platform
        if not on_platform and y >= GROUND_Y:
            y = GROUND_Y
            velocity_y = 0
            is_jumping = False

        # Horizontal movement and scrolling
        if move_dir != 0:
            nx = x + move_dir * speed
            if LEFT_BOUNDARY < nx < RIGHT_BOUNDARY:
                x = nx
            else:
                ground_scroll -= move_dir * GROUND_SCROLL_SPEED
                for p in platforms:
                    p.x -= move_dir * GROUND_SCROLL_SPEED
                for star in stars:
                    star.x -= move_dir * GROUND_SCROLL_SPEED
                enemy_x -= move_dir * GROUND_SCROLL_SPEED

        # Update platforms
        for p in platforms:
            p.update()

        # Draw ground
        for i in range((WIDTH // GROUND_SEGMENT_WIDTH) + 2):
            sx = (i * GROUND_SEGMENT_WIDTH) + (ground_scroll % GROUND_SEGMENT_WIDTH) - GROUND_SEGMENT_WIDTH
            pygame.draw.rect(screen, GREEN, (sx, GROUND_Y + 40, GROUND_SEGMENT_WIDTH, HEIGHT - (GROUND_Y + 40)))

        # Draw platforms
        for p in platforms:
            p.draw(screen)

        # Draw stars
        for star in stars:
            pygame.draw.polygon(screen, GOLD, [
                (star.centerx, star.top),
                (star.centerx + 3, star.top + 10),
                (star.right, star.top + 10),
                (star.centerx + 5, star.centery),
                (star.centerx + 9, star.bottom),
                (star.centerx, star.centery + 7),
                (star.centerx - 9, star.bottom),
                (star.centerx - 5, star.centery),
                (star.left, star.top + 10),
                (star.centerx - 3, star.top + 10)
            ])

        # Handle walking animation
        if is_moving and not is_jumping:
            walk_timer += 1
            if walk_timer >= 10:
                walk_timer = 0
                walk_frame = (walk_frame + 1) % 2
        else:
            walk_frame = 0

        # Draw player
        head_r = 15
        body_len = 40
        leg_len = 30
        hc = (x, y)
        bt = (x, y + head_r)
        bb = (x, y + head_r + body_len)
        sh_y = y + head_r + 5
        hip_y = bb[1]

        pygame.draw.circle(screen, BLACK, hc, head_r, 2)
        pygame.draw.line(screen, BLACK, bt, bb, 2)

        # Arms and legs depending on action
        if is_jumping:
            pygame.draw.line(screen, BLACK, (x, sh_y), (x - 15, sh_y - 10), 2)
            pygame.draw.line(screen, BLACK, (x - 15, sh_y - 10), (x - 25, sh_y - 25), 2)
            pygame.draw.line(screen, BLACK, (x, sh_y), (x + 15, sh_y - 10), 2)
            pygame.draw.line(screen, BLACK, (x + 15, sh_y - 10), (x + 25, sh_y - 25), 2)
            pygame.draw.line(screen, BLACK, bb, (x - 10, hip_y + 15), 2)
            pygame.draw.line(screen, BLACK, (x - 10, hip_y + 15), (x - 20, hip_y + 30), 2)
            pygame.draw.line(screen, BLACK, bb, (x + 10, hip_y + 15), 2)
            pygame.draw.line(screen, BLACK, (x + 10, hip_y + 15), (x + 20, hip_y + 30), 2)

        elif is_moving:
            if walk_frame == 0:
                pygame.draw.line(screen, BLACK, (x, sh_y), (x - 15, sh_y + 5), 2)
                pygame.draw.line(screen, BLACK, (x - 15, sh_y + 5), (x - 25, sh_y + 15), 2)
                pygame.draw.line(screen, BLACK, (x, sh_y), (x + 15, sh_y), 2)
                pygame.draw.line(screen, BLACK, bb, (x - 10, hip_y + 15), 2)
                pygame.draw.line(screen, BLACK, bb, (x + 10, hip_y + 30), 2)
            else:
                pygame.draw.line(screen, BLACK, (x, sh_y), (x + 15, sh_y + 5), 2)
                pygame.draw.line(screen, BLACK, (x + 15, sh_y + 5), (x + 25, sh_y + 15), 2)
                pygame.draw.line(screen, BLACK, (x, sh_y), (x - 15, sh_y), 2)
                pygame.draw.line(screen, BLACK, bb, (x + 10, hip_y + 15), 2)
                pygame.draw.line(screen, BLACK, bb, (x - 10, hip_y + 30), 2)

        else:
            pygame.draw.line(screen, BLACK, (x - 20, sh_y), (x - 5, sh_y), 2)
            pygame.draw.line(screen, BLACK, (x + 20, sh_y), (x + 5, sh_y), 2)
            pygame.draw.line(screen, BLACK, bb, (x - 10, hip_y + 30), 2)
            pygame.draw.line(screen, BLACK, bb, (x + 10, hip_y + 30), 2)

        # Player hitbox
        player_rect = pygame.Rect(x - 15, y, 30, head_r + body_len + leg_len)

        # Move enemy and draw it
        if abs(enemy_x - x) > 5:
            enemy_x += enemy_speed if enemy_x < x else -enemy_speed

        ec = (enemy_x, enemy_y)
        eb_t = (enemy_x, enemy_y + head_r)
        eb_b = (enemy_x, enemy_y + head_r + body_len)
        esh_y = enemy_y + head_r + 5
        pygame.draw.circle(screen, RED, ec, head_r, 2)
        pygame.draw.line(screen, RED, eb_t, eb_b, 2)
        pygame.draw.line(screen, RED, (enemy_x, esh_y), (enemy_x + 20, esh_y + 10), 2)
        pygame.draw.line(screen, RED, eb_b, (enemy_x + 10, eb_b[1] + 30), 2)
        pygame.draw.line(screen, RED, (enemy_x, esh_y), (enemy_x - 20, esh_y + 10), 2)
        pygame.draw.line(screen, RED, eb_b, (enemy_x - 10, eb_b[1] + 30), 2)
        sword_start = (enemy_x + 20, esh_y + 10)
        sword_end = (sword_start[0] + sword_length, sword_start[1])
        pygame.draw.line(screen, (200,200,200), sword_start, sword_end, 3)

        enemy_rect = pygame.Rect(enemy_x - 15, enemy_y, 30, head_r + body_len + leg_len)

        # Check star collision
        for star in stars[:]:
            if player_rect.colliderect(star):
                stars.remove(star)
                score += 1
                stars.append(create_star())

        # Check enemy collision
        if player_rect.colliderect(enemy_rect):
            game_over = True
            game_end_time = pygame.time.get_ticks()

        # Draw current score
        screen.blit(font.render(f"Stars: {score}", True, BLACK), (20, 20))

    else:
        # Show game over screen and final score
        screen.blit(big_font.render("GAME OVER!", True, RED), 
                    (WIDTH//2 - 200, HEIGHT//2 - 50))
        screen.blit(font.render(f"Final Score: {score}", True, BLACK),
                    (WIDTH//2 - 150, HEIGHT//2 + 30))

        # Exit after 3 seconds
        if pygame.time.get_ticks() - game_end_time > 1000:
            running = False

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
sys.exit()
